import ApiService from "../../../Service/ApiService";

/**
 * Simple Adapter Pattern Implementation
 * Adapter n√†y ƒë√≥ng vai tr√≤ nh∆∞ m·ªôt c·∫ßu n·ªëi gi·ªØa client (Product page) 
 * v√† ApiService, cung c·∫•p interface th·ªëng nh·∫•t v√† x·ª≠ l√Ω d·ªØ li·ªáu
 */
export default class SimpleProductAdapter {
  constructor() {
    this.apiService = ApiService;
  }

  /**
   * L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m v·ªõi d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a
   */
  async getAllProducts() {
    try {
      console.log('üü† ADAPTER PATTERN: SimpleProductAdapter calling ApiService.getAllProducts()');
      
      // G·ªçi API th√¥ng qua ApiService
      const rawProducts = await this.apiService.getAllProducts();
      
      // Adapter chuy·ªÉn ƒë·ªïi v√† chu·∫©n h√≥a d·ªØ li·ªáu
      const adaptedProducts = rawProducts.map(product => ({
        ...product,
        // ƒê·∫£m b·∫£o c√°c field quan tr·ªçng lu√¥n c√≥ gi√° tr·ªã
        productName: product.productName || 'Unknown Product',
        categoryName: product.categoryName || 'Unknown Category',
        supplierName: product.supplierName || 'Unknown Supplier',
        inventory_quantity: product.inventory_quantity || 0,
        price: product.price || 0,
        productStatus: product.productStatus || 'OUT_STOCK',
        // Chu·∫©n h√≥a format ng√†y th√°ng
        production_date: product.production_date ? new Date(product.production_date).toISOString() : null,
        expiration_date: product.expiration_date ? new Date(product.expiration_date).toISOString() : null,
        // Th√™m index ƒë·ªÉ h·ªó tr·ª£ UI
        stt: product.id
      }));

      console.log(`‚úÖ ADAPTER PATTERN: Successfully adapted ${adaptedProducts.length} products`);
      return adaptedProducts;
      
    } catch (error) {
      console.error('‚ùå ADAPTER PATTERN: Error in SimpleProductAdapter.getAllProducts:', error);
      // Adapter c√≥ th·ªÉ x·ª≠ l√Ω l·ªói v√† tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
      throw new Error(`Failed to load products: ${error.message}`);
    }
  }

  /**
   * T√¨m ki·∫øm s·∫£n ph·∫©m v·ªõi keyword
   */
  async searchProducts(keyword) {
    try {
      console.log(`üü† ADAPTER PATTERN: SimpleProductAdapter searching for "${keyword}"`);
      
      // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m v√† filter
      const allProducts = await this.getAllProducts();
      const filteredProducts = allProducts.filter(product => 
        product.productName.toLowerCase().includes(keyword.toLowerCase()) ||
        product.categoryName.toLowerCase().includes(keyword.toLowerCase()) ||
        product.supplierName.toLowerCase().includes(keyword.toLowerCase())
      );

      console.log(`‚úÖ ADAPTER PATTERN: Found ${filteredProducts.length} products matching "${keyword}"`);
      return filteredProducts;
      
    } catch (error) {
      console.error('‚ùå ADAPTER PATTERN: Error in SimpleProductAdapter.searchProducts:', error);
      throw error;
    }
  }

  /**
   * L·∫•y th·ªëng k√™ s·∫£n ph·∫©m
   */
  async getProductStats() {
    try {
      console.log('üü† ADAPTER PATTERN: SimpleProductAdapter calculating product statistics');
      
      const products = await this.getAllProducts();
      const stats = {
        total: products.length,
        inStock: products.filter(p => p.productStatus === 'IN_STOCK').length,
        outOfStock: products.filter(p => p.productStatus === 'OUT_STOCK').length,
        totalValue: products.reduce((sum, p) => sum + (p.price * p.inventory_quantity), 0),
        avgPrice: products.length > 0 ? products.reduce((sum, p) => sum + p.price, 0) / products.length : 0
      };

      console.log('‚úÖ ADAPTER PATTERN: Product statistics calculated:', stats);
      return stats;
      
    } catch (error) {
      console.error('‚ùå ADAPTER PATTERN: Error in SimpleProductAdapter.getProductStats:', error);
      throw error;
    }
  }
}
